# -*- coding: utf-8 -*-
"""GardeningDeploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vpi6I3gKFTNpGn_K0fz5rjfWL08U9vxj
"""

pip install -r requirements.txt

import streamlit as st
from transformers import AutoTokenizer, AutoModelForCausalLM

pip install python-dotenv

pip install torch
import torch
from PIL import Image
import os

from dotenv import load_dotenv
load_dotenv()

model_name = os.getenv("MODEL_NAME", "KhunPop/Gardening")
api_key = os.getenv('KHUNPOP_SECRET')

if not api_key:
    st.error("Hugging Face API key is not set. Please check your .env file or environment variables.")

# App title and description
st.title("I am Your GrowBuddy ðŸŒ±")
st.write("Let me help you start gardening. Let's grow together!")

#Load the model and tokenizer
@st.cache_resource
def load_model():
    try:
        tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=api_key)
        model = AutoModelForCausalLM.from_pretrained(model_name, use_auth_token=api_key)
        return tokenizer, model
    except Exception as e:
        st.error(f"Failed to load model: {e}")
        return None, None

tokenizer, model = load_model()

if not tokenizer or not model:
    st.stop()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
if model is not None:
    model = model.to(device)

# Initialize chat history
if "messages" not in st.session_state.keys():
    st.session_state.messages = [
        {"role": "assistant", "content": "Hello there! How can I help you with gardening today?"}
    ]

# Display chat messages from history
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])

# Function to generate text response
def generate_response(prompt):
    try:
        inputs = tokenizer(prompt, return_tensors="pt").to(device)  # Ensure inputs are moved to the device
        outputs = model.generate(**inputs, max_new_tokens=150, temperature=0.7)
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        return response
    except Exception as e:
        st.error(f"Error during text generation: {e}")
        return "Sorry, I couldn't process your request."

# User input handling
user_input = st.chat_input("Type your gardening question here:")

if user_input:
    # Display user message
    with st.chat_message("user"):
        st.write(user_input)

# Generate and display assistant message
with st.chat_message("assistant"):
        with st.spinner("I'm gonna tell you..."):
            response = generate_response(user_input)
            st.write(response)

# Update chat history
    st.session_state.messages.append({"role": "user", "content": user_input})
    st.session_state.messages.append({"role": "assistant", "content": response})
